name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # ============================================
  # JOB 1: TESTES FRONTEND
  # ============================================
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci

      - name: Type checking
        run: npm run type-check

      - name: Lint
        run: npm run lint

      - name: Testes unitários
        run: npm run test

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # ============================================
  # JOB 2: TESTES BACKEND
  # ============================================
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Instalar dependências
        working-directory: ./backend
        run: npm ci

      - name: Setup database
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: |
          npx prisma generate
          npx prisma db push

      - name: Testes
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          JWT_SECRET: test-secret-key-for-ci-testing-only
          NODE_ENV: test
        run: npm run test:ci

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # ============================================
  # JOB 3: BUILD
  # ============================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Build Frontend
        run: |
          npm ci
          npm run build:prod

      - name: Build Backend
        working-directory: ./backend
        run: |
          npm ci
          npm run build:prod

      - name: Upload Frontend Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist/
          retention-days: 7

      - name: Upload Backend Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist/
          retention-days: 7

  # ============================================
  # JOB 4: DEPLOY (STAGING)
  # ============================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Deploy to Staging
        run: |
          echo "🚀 Deploy to staging would happen here"
          echo "Artifacts downloaded and ready for deployment"
        # Adicionar comandos de deploy real aqui
        # Por exemplo: rsync, ssh, docker push, etc.

  # ============================================
  # JOB 5: DEPLOY (PRODUCTION)
  # ============================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Deploy to Production
        run: |
          echo "🚀 Deploy to production would happen here"
          echo "Artifacts downloaded and ready for deployment"
        # Adicionar comandos de deploy real aqui
        # Por exemplo: rsync, ssh, docker push, etc.

      - name: Notify Sentry of Release
        if: env.SENTRY_AUTH_TOKEN != ''
        run: |
          echo "📊 Notifying Sentry of new release"
        # sentry-cli releases new -p sispat ${{ github.sha }}
