const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function seedExampleData() {
  try {
    console.log('üå± Populando banco com dados de exemplo...\n');

    // Buscar munic√≠pio
    const municipality = await prisma.municipality.findFirst();
    if (!municipality) {
      console.log('‚ùå Nenhum munic√≠pio encontrado!');
      return;
    }
    console.log('‚úÖ Munic√≠pio:', municipality.name);

    // Buscar usu√°rio superuser
    const superuser = await prisma.user.findFirst({
      where: { role: 'superuser' },
    });
    if (!superuser) {
      console.log('‚ùå Superusu√°rio n√£o encontrado!');
      return;
    }
    console.log('‚úÖ Superusu√°rio:', superuser.name);

    // 1. Criar Setores
    console.log('\nüìç Criando setores...');
    const setores = await Promise.all([
      prisma.sector.upsert({
        where: { codigo: 'SEC-ADM' },
        update: {},
        create: {
          id: 'sector-adm',
          name: 'Secretaria de Administra√ß√£o',
          codigo: 'SEC-ADM',
          description: 'Gest√£o administrativa e recursos humanos',
          municipalityId: municipality.id,
        },
      }),
      prisma.sector.upsert({
        where: { codigo: 'SEC-EDU' },
        update: {},
        create: {
          id: 'sector-edu',
          name: 'Secretaria de Educa√ß√£o',
          codigo: 'SEC-EDU',
          description: 'Gest√£o escolar e educacional',
          municipalityId: municipality.id,
        },
      }),
      prisma.sector.upsert({
        where: { codigo: 'SEC-SAU' },
        update: {},
        create: {
          id: 'sector-sau',
          name: 'Secretaria de Sa√∫de',
          codigo: 'SEC-SAU',
          description: 'Gest√£o de sa√∫de p√∫blica',
          municipalityId: municipality.id,
        },
      }),
    ]);
    console.log(`‚úÖ ${setores.length} setores criados`);

    // 2. Criar Locais
    console.log('\nüìå Criando locais...');
    const locais = await Promise.all([
      prisma.local.upsert({
        where: { id: 'local-adm-sala1' },
        update: {},
        create: {
          id: 'local-adm-sala1',
          name: 'Sala da Secretaria',
          description: 'Sala principal da secretaria',
          sectorId: 'sector-adm',
          municipalityId: municipality.id,
        },
      }),
      prisma.local.upsert({
        where: { id: 'local-edu-escola1' },
        update: {},
        create: {
          id: 'local-edu-escola1',
          name: 'Escola Municipal Centro',
          description: 'Escola do centro da cidade',
          sectorId: 'sector-edu',
          municipalityId: municipality.id,
        },
      }),
      prisma.local.upsert({
        where: { id: 'local-sau-posto1' },
        update: {},
        create: {
          id: 'local-sau-posto1',
          name: 'Posto de Sa√∫de Central',
          description: 'Posto de sa√∫de principal',
          sectorId: 'sector-sau',
          municipalityId: municipality.id,
        },
      }),
    ]);
    console.log(`‚úÖ ${locais.length} locais criados`);

    // 3. Criar Formas de Aquisi√ß√£o
    console.log('\nüí∞ Criando formas de aquisi√ß√£o...');
    const formas = await Promise.all([
      prisma.acquisitionForm.upsert({
        where: { id: 'aquisicao-compra' },
        update: {},
        create: {
          id: 'aquisicao-compra',
          nome: 'Compra',
          descricao: 'Aquisi√ß√£o por meio de compra direta',
          municipalityId: municipality.id,
        },
      }),
      prisma.acquisitionForm.upsert({
        where: { id: 'aquisicao-doacao' },
        update: {},
        create: {
          id: 'aquisicao-doacao',
          nome: 'Doa√ß√£o',
          descricao: 'Recebido como doa√ß√£o',
          municipalityId: municipality.id,
        },
      }),
      prisma.acquisitionForm.upsert({
        where: { id: 'aquisicao-comodato' },
        update: {},
        create: {
          id: 'aquisicao-comodato',
          nome: 'Comodato',
          descricao: 'Empr√©stimo de uso gratuito',
          municipalityId: municipality.id,
        },
      }),
    ]);
    console.log(`‚úÖ ${formas.length} formas de aquisi√ß√£o criadas`);

    // 4. Verificar se j√° existe tipo de bem
    let tipoBem = await prisma.tipoBem.findFirst();
    if (!tipoBem) {
      console.log('\nüè∑Ô∏è Criando tipo de bem...');
      tipoBem = await prisma.tipoBem.create({
        data: {
          id: 'tipo-movel',
          nome: 'M√≥vel',
          descricao: 'Bens m√≥veis em geral',
          municipalityId: municipality.id,
        },
      });
      console.log('‚úÖ Tipo de bem criado');
    } else {
      console.log('\n‚úÖ Tipo de bem j√° existe:', tipoBem.nome);
    }

    // 5. Criar Patrim√¥nios de Exemplo
    console.log('\nüì¶ Criando patrim√¥nios de exemplo...');
    const patrimonios = [];

    for (let i = 1; i <= 5; i++) {
      const setor = setores[i % setores.length];
      const local = locais[i % locais.length];
      const forma = formas[i % formas.length];

      const numeroPatrimonio = `PAT-${String(i).padStart(6, '0')}`;

      const patrimonio = await prisma.patrimonio.create({
        data: {
          numero_patrimonio: numeroPatrimonio,
          descricao_bem: `Bem de Exemplo ${i}`,
          marca: `Marca ${i}`,
          modelo: `Modelo ${i}`,
          numero_serie: `SN-${i}`,
          valor_aquisicao: 1000 + (i * 500),
          data_aquisicao: new Date(),
          estado_conservacao: ['√ìTIMO', 'BOM', 'REGULAR'][i % 3],
          situacao_bem: 'ativo',
          observacoes: `Bem de exemplo criado pelo seed #${i}`,
          sectorId: setor.id,
          localId: local.id,
          tipoBemId: tipoBem.id,
          acquisitionFormId: forma.id,
          creatorId: superuser.id,
          municipalityId: municipality.id,
        },
      });

      patrimonios.push(patrimonio);
    }

    console.log(`‚úÖ ${patrimonios.length} patrim√¥nios criados`);

    console.log('\n‚úÖ Seed de dados de exemplo conclu√≠do!\n');
    console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë                                                           ‚ïë');
    console.log('‚ïë         üéâ  DADOS DE EXEMPLO CRIADOS!  üéâ               ‚ïë');
    console.log('‚ïë                                                           ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');
    console.log('üìä Resumo:');
    console.log(`   - Setores: ${setores.length}`);
    console.log(`   - Locais: ${locais.length}`);
    console.log(`   - Formas de Aquisi√ß√£o: ${formas.length}`);
    console.log(`   - Tipos de Bens: 1`);
    console.log(`   - Patrim√¥nios: ${patrimonios.length}\n`);
    console.log('üéØ Pr√≥ximos passos:');
    console.log('   1. Recarregue o frontend (F5)');
    console.log('   2. V√° em "Bens Cadastrados"');
    console.log('   3. Voc√™ ver√° 5 bens de exemplo! ‚úÖ\n');

  } catch (error) {
    console.error('‚ùå Erro:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

seedExampleData();

