import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

/**
 * Buscar customiza√ß√£o do munic√≠pio (p√∫blico - para tela de login)
 * GET /api/customization/public
 */
export const getPublicCustomization = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('[DEV] üåê Buscando customiza√ß√£o p√∫blica (sem autentica√ß√£o)...');
    
    // Buscar primeiro munic√≠pio (sistema single-municipality)
    const municipality = await prisma.municipality.findFirst();
    
    if (!municipality) {
      console.log('[DEV] ‚ùå Nenhum munic√≠pio encontrado');
      res.status(404).json({ error: 'Munic√≠pio n√£o encontrado' });
      return;
    }

    const municipalityId = municipality.id;
    console.log('[DEV] üìç Munic√≠pio:', municipalityId);

    // Buscar customiza√ß√£o usando SQL raw
    const customizations = await prisma.$queryRaw<any[]>`
      SELECT * FROM customizations WHERE "municipalityId" = ${municipalityId}
    `;

    let customization = customizations[0];

    // Se n√£o existir, retornar valores padr√£o
    if (!customization) {
      console.log('[DEV] ‚ÑπÔ∏è Nenhuma customiza√ß√£o encontrada, usando padr√£o');
      customization = {
        id: 'default',
        municipalityId,
        primaryColor: '#2563eb',
        backgroundColor: '#f1f5f9',
        welcomeTitle: 'Bem-vindo ao SISPAT',
        welcomeSubtitle: 'Sistema de Gest√£o de Patrim√¥nio',
      };
    }

    console.log('[DEV] ‚úÖ Customiza√ß√£o p√∫blica carregada');

    res.json({ customization });
  } catch (error) {
    console.error('[DEV] ‚ùå Erro ao buscar customiza√ß√£o p√∫blica:', error);
    res.status(500).json({ error: 'Erro ao buscar customiza√ß√£o' });
  }
};

/**
 * Buscar customiza√ß√£o do munic√≠pio (autenticado)
 * GET /api/customization
 */
export const getCustomization = async (req: Request, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json({ error: 'N√£o autenticado' });
      return;
    }

    const { municipalityId } = req.user;

    // Buscar customiza√ß√£o usando SQL raw
    const customizations = await prisma.$queryRaw<any[]>`
      SELECT * FROM customizations WHERE "municipalityId" = ${municipalityId}
    `;

    let customization = customizations[0];

    // Se n√£o existir, criar com valores padr√£o
    if (!customization) {
      await prisma.$executeRaw`
        INSERT INTO customizations ("id", "municipalityId")
        VALUES (gen_random_uuid()::text, ${municipalityId})
      `;
      
      const newCustomizations = await prisma.$queryRaw<any[]>`
        SELECT * FROM customizations WHERE "municipalityId" = ${municipalityId}
      `;
      customization = newCustomizations[0];
    }

    res.json({ customization });
  } catch (error) {
    console.error('Erro ao buscar customiza√ß√£o:', error);
    res.status(500).json({ error: 'Erro ao buscar customiza√ß√£o' });
  }
};

/**
 * Salvar customiza√ß√£o do munic√≠pio
 * PUT /api/customization
 */
export const saveCustomization = async (req: Request, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json({ error: 'N√£o autenticado' });
      return;
    }

    console.log('üîê [DEV] Verificando permiss√µes...');
    console.log('   Usu√°rio:', req.user.email);
    console.log('   Role:', req.user.role);
    console.log('   MunicipalityId:', req.user.municipalityId);

    // Supervisor, admin e superuser podem alterar customiza√ß√£o
    const allowedRoles = ['superuser', 'supervisor', 'admin'];
    if (!allowedRoles.includes(req.user.role)) {
      console.log('‚ùå [DEV] Acesso negado - Role n√£o permitido:', req.user.role);
      res.status(403).json({ 
        error: 'Sem permiss√£o para alterar customiza√ß√£o',
        userRole: req.user.role,
        allowedRoles 
      });
      return;
    }

    console.log('‚úÖ [DEV] Permiss√£o concedida para role:', req.user.role);

    const { municipalityId } = req.user;
    const updateData = req.body;

    console.log('üíæ [DEV] Salvando customiza√ß√£o para munic√≠pio:', municipalityId);
    console.log('üìã [DEV] Dados recebidos:', JSON.stringify(updateData, null, 2));

    // Campos permitidos para update
    const allowedFields = [
      'activeLogoUrl', 'secondaryLogoUrl', 'backgroundType', 'backgroundColor',
      'backgroundImageUrl', 'backgroundVideoUrl', 'videoLoop', 'videoMuted',
      'layout', 'welcomeTitle', 'welcomeSubtitle', 'primaryColor', 'buttonTextColor',
      'fontFamily', 'browserTitle', 'faviconUrl', 'loginFooterText', 
      'systemFooterText', 'superUserFooterText', 'prefeituraName', 
      'secretariaResponsavel', 'departamentoResponsavel'
    ];

    // Filtrar apenas campos permitidos
    const filteredData: Record<string, any> = {};
    for (const field of allowedFields) {
      if (updateData[field] !== undefined) {
        filteredData[field] = updateData[field];
      }
    }

    // Adicionar updatedAt
    filteredData.updatedAt = new Date();

    console.log('üìù [DEV] Campos a salvar:', Object.keys(filteredData));

    // Verificar se j√° existe customiza√ß√£o
    const existing = await prisma.$queryRaw<any[]>`
      SELECT id FROM customizations WHERE "municipalityId" = ${municipalityId} LIMIT 1
    `;

    let customization;

    if (existing.length > 0) {
      // UPDATE usando raw SQL seguro
      console.log('üîÑ [DEV] Atualizando customiza√ß√£o existente...');
      
      const setStatements: string[] = [];
      const values: any[] = [];
      let paramIndex = 1;

      for (const [key, value] of Object.entries(filteredData)) {
        setStatements.push(`"${key}" = $${paramIndex}`);
        values.push(value);
        paramIndex++;
      }

      // Adicionar municipalityId como √∫ltimo par√¢metro
      values.push(municipalityId);

      const updateQuery = `
        UPDATE customizations 
        SET ${setStatements.join(', ')}
        WHERE "municipalityId" = $${paramIndex}
        RETURNING *
      `;

      console.log('üìù [DEV] Query UPDATE:', updateQuery);
      console.log('üìù [DEV] Valores:', values);

      // ‚úÖ CORRE√á√ÉO: Usar $queryRaw com template literals √© mais seguro que $queryRawUnsafe
      // Mas como a estrutura √© din√¢mica, vamos manter mas adicionar sanitiza√ß√£o
      const result = await prisma.$queryRawUnsafe(updateQuery, ...values);
      customization = Array.isArray(result) ? result[0] : result;

      console.log('‚úÖ [DEV] UPDATE executado com sucesso');
    } else {
      // ‚úÖ CORRE√á√ÉO: INSERT tamb√©m mant√©m $queryRawUnsafe mas com valores parametrizados
      console.log('‚ûï [DEV] Criando nova customiza√ß√£o...');
      
      const id = `custom-${municipalityId}-${Date.now()}`;
      const fields = ['id', 'municipalityId', ...Object.keys(filteredData)];
      const values = [id, municipalityId, ...Object.values(filteredData)];
      const placeholders = fields.map((_, index) => `$${index + 1}`);

      const insertQuery = `
        INSERT INTO customizations (${fields.map(f => `"${f}"`).join(', ')})
        VALUES (${placeholders.join(', ')})
        RETURNING *
      `;

      console.log('üìù [DEV] Query INSERT:', insertQuery);
      console.log('üìù [DEV] Valores:', values);

      const result = await prisma.$queryRawUnsafe(insertQuery, ...values);
      customization = Array.isArray(result) ? result[0] : result;

      console.log('‚úÖ [DEV] INSERT executado com sucesso');
    }

    console.log('‚úÖ [DEV] Customiza√ß√£o salva!');
    console.log('üìä [DEV] Resultado:', JSON.stringify(customization, null, 2));

    res.json({ 
      message: 'Customiza√ß√£o salva com sucesso', 
      customization
    });
  } catch (error: any) {
    console.error('‚ùå [DEV] ===== ERRO DETALHADO =====');
    console.error('   Tipo:', error.constructor.name);
    console.error('   Mensagem:', error.message);
    console.error('   C√≥digo:', error.code);
    console.error('   Stack:', error.stack);
    console.error('==============================');
    
    res.status(500).json({ 
      error: 'Erro ao salvar customiza√ß√£o',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

/**
 * Resetar customiza√ß√£o para valores padr√£o
 * POST /api/customization/reset
 */
export const resetCustomization = async (req: Request, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json({ error: 'N√£o autenticado' });
      return;
    }

    // Supervisor, admin e superuser podem resetar customiza√ß√£o
    const allowedRoles = ['superuser', 'supervisor', 'admin'];
    if (!allowedRoles.includes(req.user.role)) {
      res.status(403).json({ 
        error: 'Sem permiss√£o para resetar customiza√ß√£o',
        userRole: req.user.role,
        allowedRoles
      });
      return;
    }

    const { municipalityId } = req.user;

    // Deletar customiza√ß√£o existente
    await prisma.$executeRaw`
      DELETE FROM customizations WHERE "municipalityId" = ${municipalityId}
    `;

    // Criar nova com valores padr√£o
    await prisma.$executeRaw`
      INSERT INTO customizations ("id", "municipalityId")
      VALUES (gen_random_uuid()::text, ${municipalityId})
    `;

    // Buscar customiza√ß√£o criada
    const customizations = await prisma.$queryRaw<any[]>`
      SELECT * FROM customizations WHERE "municipalityId" = ${municipalityId}
    `;

    res.json({ 
      message: 'Customiza√ß√£o resetada com sucesso', 
      customization: customizations[0]
    });
  } catch (error) {
    console.error('Erro ao resetar customiza√ß√£o:', error);
    res.status(500).json({ error: 'Erro ao resetar customiza√ß√£o' });
  }
};

