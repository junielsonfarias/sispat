generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id @default(uuid())
  email                 String          @unique
  name                  String
  password              String
  avatar                String?
  role                  String
  responsibleSectors    String[]
  municipalityId        String
  isActive              Boolean         @default(true)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  activityLogs          ActivityLog[]
  documentsUploaded     Documento[]     @relation("DocumentosUploader")
  documentosGerais      DocumentoGeral[] @relation("DocumentosGeraisUploader")
  fichaTemplates        FichaTemplate[] @relation("FichaTemplateCreator")
  imoveisCreated        Imovel[]        @relation("ImovelCreator")
  labelTemplatesCreated LabelTemplate[] @relation("LabelTemplateCreator")
  patrimoniosCreated    Patrimonio[]    @relation("PatrimonioCreator")
  municipality          Municipality    @relation(fields: [municipalityId], references: [id])

  @@index([email])
  @@index([municipalityId])
  @@map("users")
}

model Municipality {
  id             String          @id @default(uuid())
  name           String
  state          String
  logoUrl        String?
  footerText     String?
  primaryColor   String          @default("#3B82F6")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  imoveis        Imovel[]
  labelTemplates LabelTemplate[] @relation("LabelTemplates")
  locais         Local[]
  patrimonios    Patrimonio[]
  sectors        Sector[]
  users          User[]

  @@map("municipalities")
}

model Sector {
  id             String       @id @default(uuid())
  name           String
  sigla          String?
  codigo         String       @unique
  description    String?
  endereco       String?
  cnpj           String?
  responsavel    String?
  parentId       String?
  municipalityId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  imoveis        Imovel[]
  locais         Local[]
  patrimonios    Patrimonio[]
  municipality   Municipality @relation(fields: [municipalityId], references: [id])

  @@index([municipalityId])
  @@index([codigo])
  @@map("sectors")
}

model Local {
  id             String       @id @default(uuid())
  name           String
  description    String?
  sectorId       String
  municipalityId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  municipality   Municipality @relation(fields: [municipalityId], references: [id])
  sector         Sector       @relation(fields: [sectorId], references: [id])
  patrimonios    Patrimonio[]

  @@index([sectorId])
  @@index([municipalityId])
  @@map("locais")
}

model TipoBem {
  id              String       @id @default(uuid())
  nome            String
  descricao       String?
  vidaUtilPadrao  Int?
  taxaDepreciacao Float?
  ativo           Boolean      @default(true)
  municipalityId  String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  patrimonios     Patrimonio[]

  @@index([municipalityId])
  @@map("tipos_bens")
}

model AcquisitionForm {
  id             String       @id @default(uuid())
  nome           String
  descricao      String?
  ativo          Boolean      @default(true)
  municipalityId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  patrimonios    Patrimonio[]

  @@index([municipalityId])
  @@map("formas_aquisicao")
}

model Patrimonio {
  id                 String           @id @default(uuid())
  numero_patrimonio  String           @unique
  descricao_bem      String
  tipo               String
  marca              String?
  modelo             String?
  cor                String?
  numero_serie       String?
  data_aquisicao     DateTime
  valor_aquisicao    Float
  quantidade         Int              @default(1)
  numero_nota_fiscal String?
  forma_aquisicao    String
  setor_responsavel  String
  local_objeto       String
  status             String           @default("ativo")
  situacao_bem       String?
  observacoes        String?
  fotos              String[]         @default([])
  documentos         String[]         @default([])
  data_baixa         DateTime?
  motivo_baixa       String?
  documentos_baixa   String[]         @default([])
  metodo_depreciacao String?          @default("Linear")
  vida_util_anos     Int?
  valor_residual     Float?
  createdAt          DateTime         @default(now())
  createdBy          String
  updatedAt          DateTime         @updatedAt
  updatedBy          String?
  municipalityId     String
  sectorId           String
  localId            String?
  tipoId             String?
  acquisitionFormId  String?
  documentosFiles    Documento[]      @relation("DocumentosPatrimonio")
  emprestimos        Emprestimo[]
  historico          HistoricoEntry[]
  inventoryItems     InventoryItem[]
  manutencoes        ManutencaoTask[]
  notes              Note[]
  acquisitionForm    AcquisitionForm? @relation(fields: [acquisitionFormId], references: [id])
  creator            User             @relation("PatrimonioCreator", fields: [createdBy], references: [id])
  local              Local?           @relation(fields: [localId], references: [id])
  municipality       Municipality     @relation(fields: [municipalityId], references: [id])
  sector             Sector           @relation(fields: [sectorId], references: [id])
  tipoBem            TipoBem?         @relation(fields: [tipoId], references: [id])
  subPatrimonios     SubPatrimonio[]
  transferencias     Transferencia[]  @relation("TransferenciaPatrimonio")

  @@index([numero_patrimonio])
  @@index([municipalityId])
  @@index([sectorId])
  @@index([status])
  @@index([createdAt])
  @@index([data_aquisicao])
  @@index([municipalityId, status])
  @@index([sectorId, status])
  @@map("patrimonios")
}

model Imovel {
  id                String           @id @default(uuid())
  numero_patrimonio String           @unique
  denominacao       String
  endereco          String
  setor             String
  data_aquisicao    DateTime
  valor_aquisicao   Float
  area_terreno      Float
  area_construida   Float
  latitude          Float?
  longitude         Float?
  descricao         String?
  observacoes       String?
  tipo_imovel       String?
  situacao          String?
  fotos             String[]         @default([])
  documentos        String[]         @default([])
  url_documentos    String?
  createdAt         DateTime         @default(now())
  createdBy         String
  updatedAt         DateTime         @updatedAt
  updatedBy         String?
  municipalityId    String
  sectorId          String
  documentosFiles   Documento[]      @relation("DocumentosImovel")
  historico         HistoricoEntry[]
  creator           User             @relation("ImovelCreator", fields: [createdBy], references: [id])
  municipality      Municipality     @relation(fields: [municipalityId], references: [id])
  sector            Sector           @relation(fields: [sectorId], references: [id])
  manutencoes       ManutencaoTask[]

  @@index([numero_patrimonio])
  @@index([municipalityId])
  @@index([sectorId])
  @@index([createdAt])
  @@index([data_aquisicao])
  @@index([municipalityId, sectorId])
  @@map("imoveis")
}

model HistoricoEntry {
  id           String      @id @default(uuid())
  date         DateTime    @default(now())
  action       String
  details      String
  user         String
  origem       String?
  destino      String?
  patrimonioId String?
  imovelId     String?
  imovel       Imovel?     @relation(fields: [imovelId], references: [id], onDelete: Cascade)
  patrimonio   Patrimonio? @relation(fields: [patrimonioId], references: [id], onDelete: Cascade)

  @@index([patrimonioId])
  @@index([imovelId])
  @@map("historico_entries")
}

model Note {
  id           String     @id @default(uuid())
  text         String
  date         DateTime   @default(now())
  userId       String
  userName     String
  patrimonioId String
  patrimonio   Patrimonio @relation(fields: [patrimonioId], references: [id], onDelete: Cascade)

  @@index([patrimonioId])
  @@map("notes")
}

model Transferencia {
  id                 String     @id @default(uuid())
  patrimonioId       String
  numero_patrimonio  String
  descricao_bem      String
  setorOrigem        String
  setorDestino       String
  localOrigem        String
  localDestino       String
  motivo             String
  dataTransferencia  DateTime
  responsavelOrigem  String
  responsavelDestino String
  status             String     @default("pendente")
  observacoes        String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  patrimonio         Patrimonio @relation("TransferenciaPatrimonio", fields: [patrimonioId], references: [id])

  @@index([patrimonioId])
  @@index([status])
  @@map("transferencias")
}

model Emprestimo {
  id                String     @id @default(uuid())
  patrimonioId      String
  numero_patrimonio String
  descricao_bem     String
  responsavel       String
  setor             String
  dataEmprestimo    DateTime
  dataPrevDevolucao DateTime
  dataDevolucao     DateTime?
  motivo            String
  observacoes       String?
  status            String     @default("ativo")
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  patrimonio        Patrimonio @relation(fields: [patrimonioId], references: [id])

  @@index([patrimonioId])
  @@index([status])
  @@map("emprestimos")
}

model SubPatrimonio {
  id           String     @id @default(uuid())
  patrimonioId String
  descricao    String
  quantidade   Int
  valor        Float
  status       String     @default("ativo")
  observacoes  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  patrimonio   Patrimonio @relation(fields: [patrimonioId], references: [id], onDelete: Cascade)

  @@index([patrimonioId])
  @@map("sub_patrimonios")
}

model Inventory {
  id                 String          @id @default(uuid())
  title              String
  description        String?
  responsavel        String
  setor              String?
  local              String?
  scope              String
  specificLocationId String?
  status             String          @default("em_andamento")
  dataInicio         DateTime        @default(now())
  dataFim            DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  items              InventoryItem[]

  @@index([status])
  @@index([setor])
  @@map("inventarios")
}

model InventoryItem {
  id            String     @id @default(uuid())
  inventoryId   String
  patrimonioId  String
  encontrado    Boolean    @default(false)
  observacoes   String?
  verificadoEm  DateTime?
  verificadoPor String?
  inventory     Inventory  @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  patrimonio    Patrimonio @relation(fields: [patrimonioId], references: [id])

  @@index([inventoryId])
  @@index([patrimonioId])
  @@map("inventory_items")
}

model ManutencaoTask {
  id            String      @id @default(uuid())
  patrimonioId  String?
  imovelId      String?
  tipo          String
  titulo        String
  descricao     String
  prioridade    String
  status        String      @default("pendente")
  responsavel   String?
  dataPrevista  DateTime
  dataConclusao DateTime?
  custo         Float?
  observacoes   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  imovel        Imovel?     @relation(fields: [imovelId], references: [id])
  patrimonio    Patrimonio? @relation(fields: [patrimonioId], references: [id])

  @@index([patrimonioId])
  @@index([imovelId])
  @@index([status])
  @@map("manutencao_tasks")
}

model ActivityLog {
  id         String   @id @default(uuid())
  userId     String
  action     String
  entityType String?
  entityId   String?
  details    String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("activity_logs")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  tipo      String
  titulo    String
  mensagem  String
  link      String?
  lida      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([lida])
  @@map("notifications")
}

model SystemConfiguration {
  id                    String   @id @default(uuid())
  autoBackupEnabled     Boolean  @default(false)
  backupFrequency       String   @default("daily")
  maintenanceMode       Boolean  @default(false)
  allowPublicSearch     Boolean  @default(true)
  maxUploadSize         Int      @default(10485760)
  sessionTimeout        Int      @default(3600)
  passwordExpiryDays    Int      @default(90)
  requirePasswordChange Boolean  @default(false)
  updatedAt             DateTime @updatedAt

  @@map("system_configuration")
}

model Customization {
  id                      String   @id @default(uuid())
  municipalityId          String   @unique
  activeLogoUrl           String?
  secondaryLogoUrl        String?
  backgroundType          String   @default("color")
  backgroundColor         String   @default("#f1f5f9")
  backgroundImageUrl      String?
  backgroundVideoUrl      String?
  videoLoop               Boolean  @default(true)
  videoMuted              Boolean  @default(true)
  layout                  String   @default("center")
  welcomeTitle            String   @default("Bem-vindo ao SISPAT")
  welcomeSubtitle         String   @default("Sistema de Gestão de Patrimônio")
  primaryColor            String   @default("#2563eb")
  buttonTextColor         String   @default("#ffffff")
  fontFamily              String   @default("'Inter var', sans-serif")
  browserTitle            String   @default("SISPAT - Sistema de Gestão de Patrimônio")
  faviconUrl              String?
  loginFooterText         String   @default("© 2025 Curling. Todos os direitos reservados.")
  systemFooterText        String   @default("SISPAT - Desenvolvido por Curling")
  superUserFooterText     String?
  prefeituraName          String   @default("PREFEITURA DE SÃO SEBASTIÃO DA BOA VISTA")
  secretariaResponsavel   String   @default("SECRETARIA MUNICIPAL DE ADMINISTRAÇÃO")
  departamentoResponsavel String   @default("DEPARTAMENTO DE PATRIMÔNIO")
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("customizations")
}

model ImovelCustomField {
  id              String   @id @default(uuid())
  name            String
  label           String
  type            String
  required        Boolean  @default(false)
  defaultValue    String?
  options         String?
  placeholder     String?
  helpText        String?
  validationRules String?
  displayOrder    Int      @default(0)
  isActive        Boolean  @default(true)
  isSystem        Boolean  @default(false)
  municipalityId  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([municipalityId])
  @@index([isActive])
  @@index([displayOrder])
  @@map("imovel_custom_fields")
}

model Documento {
  id           String      @id @default(uuid())
  patrimonioId String?
  imovelId     String?
  name         String
  type         String
  url          String
  fileSize     Int?
  description  String?
  uploadedBy   String
  uploadedAt   DateTime    @default(now())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  imovel       Imovel?     @relation("DocumentosImovel", fields: [imovelId], references: [id], onDelete: Cascade)
  patrimonio   Patrimonio? @relation("DocumentosPatrimonio", fields: [patrimonioId], references: [id], onDelete: Cascade)
  uploader     User        @relation("DocumentosUploader", fields: [uploadedBy], references: [id])

  @@index([patrimonioId])
  @@index([imovelId])
  @@index([uploadedBy])
  @@map("documents")
}

model FichaTemplate {
  id             String   @id @default(uuid())
  name           String
  description    String?
  type           String
  isDefault      Boolean  @default(false)
  isActive       Boolean  @default(true)
  config         Json
  municipalityId String
  createdBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  creator        User     @relation("FichaTemplateCreator", fields: [createdBy], references: [id])

  @@index([municipalityId])
  @@index([type])
  @@index([isDefault])
  @@index([isActive])
  @@map("ficha_templates")
}

model LabelTemplate {
  id             String       @id @default(uuid())
  name           String
  width          Int
  height         Int
  isDefault      Boolean      @default(false)
  isActive       Boolean      @default(true)
  elements       Json
  municipalityId String
  createdBy      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  creator        User         @relation("LabelTemplateCreator", fields: [createdBy], references: [id])
  municipality   Municipality @relation("LabelTemplates", fields: [municipalityId], references: [id], onDelete: Cascade)

  @@index([municipalityId])
  @@index([isDefault])
  @@index([isActive])
  @@map("label_templates")
}

model DocumentoGeral {
  id           String   @id @default(uuid())
  titulo       String
  descricao    String?
  tipo         String
  categoria    String?
  tags         String[]
  fileName     String
  filePath     String
  fileSize     Int
  mimeType     String
  isPublic     Boolean  @default(false)
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploadedBy   User     @relation("DocumentosGeraisUploader", fields: [uploadedById], references: [id])

  @@index([uploadedById])
  @@index([tipo])
  @@index([isPublic])
  @@map("documentos_gerais")
}
